#include<stdio.h>
#include<stdlib.h>
char arr[20],stack[20];
int ip,top=-1;
void error(){
    printf("\nerror occured\n");
    exit(0);
}
void disp(){
    for(int i =0;i<=top;i++)
        printf("%c",stack[i]);
}
void ipdisp(){
    for(int i =ip;arr[i]!='\0';i++)
        printf("%c",arr[i]);
}
void push(char c){
    if(top>=20){
        printf("\n Stack is full overflow \n");
        exit(0);
    }
    else{
        top++;
        stack[top]=c;
    }
}
void pop(){
    if(top<0){
        printf("\n Stack is Empty  Underflow \n");
        exit(0);
    }
    else{
        top--;
    }
}
void red(int r)
{
    //poping
    if(r==1||r==3||r==5){
        pop();
        pop();
        pop();
        pop();
        pop();
        pop();
    }
    else{
        pop();
        pop();
    }
    //pushing
    if(r==1||r==2){
        push('E');
        if(stack[top-1]=='0')
            push('1');
        else if(stack[top-1]=='4')
            push('8');
        else
            error();
    }
    else if(r==3||r==4){
        push('T');
        if(stack[top-1]=='0'||stack[top-1]=='4')
            push('2');
        else if(stack[top-1]=='6')
            push('9');
        else
            error();
    }
    else if(r==5||r==6){
        push('F');
        if(stack[top-1]=='0'||stack[top-1]=='4'||stack[top-1]=='6')
            push('3');
        else if(stack[top-1]=='7'||stack[top-1]=='4')
            push('@');
        else
            error();
    }
}
void parser(){
    //push('$');
    push('0');
    printf("\nStack contents------------input data\n");
    while(1){
        disp();
        printf("----------------------------");
        ipdisp();
        printf("\n");
        switch (stack[top])
        {
        case '0':if(arr[ip]=='i'){
                    push('i');
                    push('5');
                    ip++;
                }
                else if(arr[ip]=='('){
                    push('(');
                    push('4');
                    ip++;
                }
                else
                    error();
            break;
        case '1':if(arr[ip]=='+'){
                    push('+');
                    push('6');
                    ip++;
                }
                else if(arr[ip]=='$'){
                    printf("\nSucessfully parsed\n");
                    exit(0);
                }
                else
                    error();
            break;
        case '2':if(arr[ip]=='*'){
                    push('*');
                    push('7');
                    ip++;
                }
                else if(arr[ip]=='+'||arr[ip]==')'||arr[ip]=='$'){
                    red(2);
                }
                else
                    error();
            break;
        case '3':if(arr[ip]=='+'||arr[ip]=='*'||arr[ip]==')'||arr[ip]=='$'){
                    red(4);
                }
                else
                    error();
            break;
        case '4':if(arr[ip]=='i'){
                    push('i');
                    push('5');
                    ip++;
                }
                else if(arr[ip]=='('){
                    push('(');
                    push('4');
                    ip++;
                }
                else
                    error();
            break;
        case '5':if(arr[ip]=='+'||arr[ip]=='*'||arr[ip]==')'||arr[ip]=='$'){
                    red(6);
                }
                else
                    error();
            break;
        case '6':if(arr[ip]=='i'){
                    push('i');
                    push('5');
                    ip++;
                }
                else if(arr[ip]=='('){
                    push('(');
                    push('4');
                    ip++;
                }
                else
                    error();
            break;
        case '7':if(arr[ip]=='i'){
                    push('i');
                    push('5');
                    ip++;
                }
                else if(arr[ip]=='('){
                    push('(');
                    push('4');
                    ip++;
                }
                else
                    error();
            break;
        case '8':if(arr[ip]=='+'){
                    push('+');
                    push('6');
                    ip++;
                }
                else if(arr[ip]==')'){
                    push(')');
                    push('#');
                    ip++;
                }
                else
                    error();
            break;
        case '9':if(arr[ip]=='*'){
                    push('*');
                    push('7');
                    ip++;
                }
                else if(arr[ip]=='+'||arr[ip]==')'||arr[ip]=='$'){
                    red(1);
                }
                else
                    error();
            break;
        case '@':if(arr[ip]=='+'||arr[ip]=='*'||arr[ip]==')'||arr[ip]=='$'){
                    red(3);
                }
                else
                    error();
            break;
        case '#':if(arr[ip]=='+'||arr[ip]=='*'||arr[ip]==')'||arr[ip]=='$'){
                    red(5);
                }
                else
                    error();
            break;
        default:
            break;
        }
    }
}
void main(){
    int flag=0;
    printf("\nEnter the input ending with $\n");
    scanf("%s",arr);
    parser();
}
